definitions:
  models.ErrorResponse:
    properties:
      message:
        example: Invalid credentials
        type: string
    type: object
  models.LoginRequestModel:
    properties:
      password:
        example: password
        type: string
      username:
        example: johndoe
        type: string
    type: object
  models.LoginResponseModel:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...
        type: string
      expire_date:
        example: "1970-01-01 00:00:00"
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.RefreshTokenRequestModel:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...
        type: string
    type: object
  models.RefreshTokenResponseModel:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...
        type: string
      expire_date:
        example: "1970-01-01 00:00:00"
        type: string
      refresh_token:
        description: Opsiyonel
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...
        type: string
    type: object
  models.RegisterRequestModel:
    properties:
      password:
        example: password
        type: string
      username:
        example: johndoe
        type: string
    type: object
  models.RegisterResponseModel:
    properties:
      id:
        example: b8bba550-3b82-4fa8-9617-8d3c0ab69989
        type: string
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - auth
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes an access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RefreshTokenResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns success message
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User registration
      tags:
      - auth
swagger: "2.0"
